from fastapi import FastAPI, Depends, HTTPException, Request, Form, Cookie, status, Query, Body,  Header
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, RedirectResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from jose import jwt, JWTError
from datetime import datetime, timedelta, timezone
from database import  get_db, engine
from models import User, ShortLink, ShortLinkArchive,Visit,VisitArchive
from schemas import LinkRequest, ShortLinkUpdateModel
from auth import authenticate_user, hash_password, verify_password
from config import SECRET_KEY, ALGORITHM, ACCESS_TOKEN_EXPIRE_MINUTES, LINK_EXPIRE_TIME_IN_MINUTES, REDIS_TTL
from contextlib import asynccontextmanager
from fastapi.staticfiles import StaticFiles
from redis_cache import get_redis, redis_dependency
from redis.asyncio import Redis
import hashlib
import random
import string
from pydantic import HttpUrl
import json
from typing import Optional
from fastapi import Request
from urllib.parse import urlparse, parse_qs, urlencode, unquote, quote
import geoip2.database


def random_salt():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))


def generate_short_code(original_url: HttpUrl) -> str:
    original_url_str = str(original_url)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HttpUrl –≤ —Å—Ç—Ä–æ–∫—É
    hash_value = hashlib.sha256((original_url_str + random_salt()).encode()).hexdigest()
    return hash_value[:8]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤

app = FastAPI()
templates = Jinja2Templates(directory="templates")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

@asynccontextmanager
async def lifespan(app: FastAPI):
  
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (—Å await!)
    get_redis()
  
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    async with engine.begin() as conn:
        await conn.run_sync(User.metadata.create_all)
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # await close_redis()
    # # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis
    # if redis:
    #     await close_redis(redis)

app = FastAPI(lifespan=lifespan)

app.mount("/static", StaticFiles(directory="templates/static"), name="static")



@app.get("/", response_class=HTMLResponse)
async def home(request: Request, token: str = Cookie(None)):
    username = None
    if token:
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            username = payload.get("sub")
        except JWTError:
            pass
    return templates.TemplateResponse("index.html", {"request": request, "username": username})

@app.get("/users/me")
async def read_users_me(token: str = Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
    except JWTError:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")

    return {"username": username}

from fastapi.responses import JSONResponse


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
async def get_user_from_token(
    token: Optional[str] = Header(None, alias="Authorization"),  
    db: AsyncSession = Depends(get_db)
) -> Optional[int]:
    if not token:
        print("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        return None  

    # –£–±–∏—Ä–∞–µ–º "Bearer " –∏–∑ —Ç–æ–∫–µ–Ω–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–æ–∫–µ–Ω
    token = token.replace("Bearer ", "").strip()
    
    try:
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {token}")
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: Optional[str] = payload.get("sub")
        if not username:
            print("–¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç username!")
            return None  
    except JWTError as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT: {e}")
        return None  

    result = await db.execute(select(User).where(User.username == username))
    user = result.scalar_one_or_none()

    if not user:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None  

    print(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π user_id: {user.id}")
    return user.id

def extract_expires_at(original_url: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä `expires_at` –∏–∑ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—á–∏—Å—Ç—ã–π URL, datetime –∏–ª–∏ None)
    """
    parsed_url = urlparse(original_url)  # –†–∞–∑–±–∏—Ä–∞–µ–º URL
    query_params = parse_qs(parsed_url.query)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    expires_at = None
    if "expires_at" in query_params:
        expires_at_values = query_params["expires_at"]
        if expires_at_values:
            try:
                expires_at = datetime.fromisoformat(expires_at_values[-1])  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            except ValueError:
                pass  # –ï—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    # –£–¥–∞–ª—è–µ–º `expires_at` –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Å–æ–±–∏—Ä–∞–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ
    filtered_params = {k: v for k, v in query_params.items() if k != "expires_at"}
    new_query_string = urlencode(filtered_params, doseq=True)
    cleaned_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"
    if new_query_string:
        cleaned_url += f"?{new_query_string}"

    return cleaned_url, expires_at

def encode_url(url: str) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis"""
    return quote(url, safe='')

def decode_url(encoded_url: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç URL –∏–∑ Redis"""
    return unquote(encoded_url)



@app.post("/links/shorten")
async def shorten_link(
    request: Request,
    link_request: LinkRequest,
    db: AsyncSession = Depends(get_db),
    redis: Redis = Depends(redis_dependency),
    user_id: Optional[int] = Depends(get_user_from_token),
):
    # üõ†Ô∏è –ò–∑–≤–ª–µ–∫–∞–µ–º expires_at –∏ –æ—á–∏—â–µ–Ω–Ω—ã–π URL
    cleaned_url, expires_at_query = extract_expires_at(link_request.original_url)

    short_code = link_request.customAlias

    # üîç –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä expire, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –≤ Redis
    if not user_id and not expires_at_query:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ URL
        redis_key = f"longlink:{quote(cleaned_url)}"  # –ö–æ–¥–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–π URL
        existing_short_code = await redis.get(redis_key)

        if existing_short_code:
            short_code = existing_short_code  # –£–∂–µ —Å—Ç—Ä–æ–∫–∞, decode() –Ω–µ –Ω—É–∂–µ–Ω!
            await redis.expire(redis_key, REDIS_TTL)
            await redis.expire(f"shortlink:{short_code}", REDIS_TTL)
            
            host = str(request.base_url).rstrip("/")
            return {
                "short_url": f"{host}/links/{short_code}",
                "original_url": cleaned_url,
                "custom_alias": short_code,
                "from_cache": True
            }

    # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å alias, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    if short_code:
        redis_key = f"shortlink:{quote(short_code)}"  # –ö–æ–¥–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥

        if await redis.exists(redis_key):
            raise HTTPException(status_code=400, detail="This alias is already taken. Please choose another.")

        query = select(ShortLink).where(ShortLink.short_code == short_code)
        result = await db.execute(query)
        if result.scalars().first():
            raise HTTPException(status_code=400, detail="This alias is already taken. Please choose another.")

    else:
        # üÜï –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥
        while True:
            short_code = generate_short_code(cleaned_url)
            redis_key = f"shortlink:{quote(short_code)}"  # –ö–æ–¥–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥

            if await redis.exists(redis_key):
                continue

            query = select(ShortLink).where(ShortLink.short_code == short_code)
            result = await db.execute(query)
            if result.scalars().first():
                continue

            break  # –ù–∞—à–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π short_code

    # –ö–æ–¥–∏—Ä—É–µ–º URL –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Redis
    encoded_url = quote(cleaned_url)  # –ö–æ–¥–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL

    # üïí –í—ã—á–∏—Å–ª—è–µ–º TTL –¥–ª—è Redis
    if expires_at_query:
        ttl = min((expires_at_query - datetime.now()).total_seconds(), REDIS_TTL)
    else:
        ttl = REDIS_TTL

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –æ–±–µ –ø–∞—Ä—ã (–∫–æ—Ä–æ—Ç–∫–∏–π ‚Üí –¥–ª–∏–Ω–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π ‚Üí –∫–æ—Ä–æ—Ç–∫–∏–π)
    await redis.set(f"shortlink:{quote(short_code)}", encoded_url, ex=int(ttl))  # –ö–æ–¥–∏—Ä—É–µ–º –∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –∏ –¥–ª–∏–Ω–Ω—ã–π URL
    await redis.set(f"longlink:{encoded_url}", quote(short_code), ex=int(ttl))  # –ö–æ–¥–∏—Ä—É–µ–º –¥–ª–∏–Ω–Ω—ã–π URL –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥

    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if expires_at_query:
        auto_expires = None  # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω `expires_at`, –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ
        expires_at = expires_at_query
    else:
        auto_expires = datetime.now() + timedelta(days=30) if user_id else datetime.now() + timedelta(days=10)
        expires_at = None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_link = ShortLink(
        short_code=short_code,
        original_url=cleaned_url,  # –û—á–∏—â–µ–Ω–Ω—ã–π URL –±–µ–∑ `expires_at`
        created_at=datetime.now(),
        expires_at=expires_at,
        user_id=user_id,
        auto_expires_at=auto_expires
    )
    db.add(new_link)
    await db.commit()

    # üìé –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π URL
    host = str(request.base_url).rstrip("/")
    short_url = f"{host}/links/{short_code}"

    return {
        "short_url": short_url,
        "original_url": cleaned_url,
        "custom_alias": short_code
    }


@app.post("/register")
async def register_user(
    username: str = Form(...),
    email: str = Form(...),
    password: str = Form(...),
    db: AsyncSession = Depends(get_db),
):
    try:
        result = await db.execute(select(User).where((User.username == username) | (User.email == email)))
        existing_user = result.scalars().first()

        if existing_user:
            if existing_user.username == username:
                raise HTTPException(status_code=400, detail="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
            if existing_user.email == email:
                raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(username=username, email=email, password=hash_password(password))
        db.add(new_user)
        await db.commit()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        return JSONResponse(content={"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "username": username}, status_code=200)

    except HTTPException as e:
        raise e
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")



@app.post("/token")
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: AsyncSession = Depends(get_db),
):
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await db.execute(select(User).where(User.username == form_data.username))
    user = result.scalars().first()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not user or not verify_password(form_data.password, user.password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    access_token = jwt.encode(
        {
            "sub": user.username,
            "exp": datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        },
        SECRET_KEY,
        algorithm=ALGORITHM
    )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞
    return {
        "access_token": access_token,
        "token_type": "bearer"
    }
    


@app.get("/logout")
async def logout():
    # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫—É–∫–∏
    response = RedirectResponse(url="/")
    response.delete_cookie("token")  # –£–¥–∞–ª—è–µ–º –∫—É–∫–∏
    return response



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GeoIP2
reader = geoip2.database.Reader('GeoLite2-Country.mmdb')

def get_country_by_ip(ip: str) -> str:
    try:
        response = reader.country(ip)
        return response.country.iso_code  # –ù–∞–ø—Ä–∏–º–µ—Ä, 'US', 'RU'
    except:
        return None  # –ï—Å–ª–∏ IP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω


def parse_domains(url: str):
    """–ü–∞—Ä—Å–∏—Ç –¥–æ–º–µ–Ω 1-–≥–æ (–∑–æ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, com, ru) –∏ 2-–≥–æ —É—Ä–æ–≤–Ω—è (example.com) —á–µ—Ä–µ–∑ urlparse."""
    parsed_url = urlparse(url)
    hostname = parsed_url.hostname  # –ù–∞–ø—Ä–∏–º–µ—Ä, "sub.example.com"

    if not hostname:
        return None, None

    parts = hostname.split(".")

    if len(parts) >= 2:
        domain_1st = parts[-1]  # –ó–æ–Ω–∞ (TLD), –Ω–∞–ø—Ä–∏–º–µ—Ä, "com", "ru"
        domain_2nd = ".".join(parts[-2:])  # –î–æ–º–µ–Ω –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, "example.com"
    else:
        domain_1st = hostname
        domain_2nd = hostname

    return domain_1st, domain_2nd

@app.get("/links/{short_code}")
async def redirect_to_original_link(
    short_code: str,
    request: Request,
    db: AsyncSession = Depends(get_db),
    redis: Redis = Depends(redis_dependency),
):
    print(short_code)
    redis_key = f"shortlink:{short_code}"
    user_cache_key = f"short_ui:{short_code}"  # –ö—ç—à user_id
    print(user_cache_key)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à user_id
    user_id = await redis.get(user_cache_key)
    if user_id is None:
        # –ï—Å–ª–∏ user_id –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –ë–î
        query = select(ShortLink.user_id).where(ShortLink.short_code == short_code)
        result = await db.execute(query)
        user_id = result.scalar()

        # –ï—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Å—Ç—å (None)
        if user_id is None:
            user_id = None  # –ì–æ—Å—Ç—å

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ –∫—ç—à
        await redis.set(user_cache_key, str(user_id) if user_id is not None else "guest", ex=REDIS_TTL)
    else:
        user_id = None if user_id == "guest" else int(user_id)

    print(f"user_id: {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å—Å—ã–ª–∫–∏
    encoded_url = await redis.get(redis_key)
    print(f"encoded_url: {encoded_url}")

    if encoded_url:
        original_url = decode_url(encoded_url)
        await redis.expire(redis_key, REDIS_TTL)
        await redis.expire(f"longlink:{encoded_url}", REDIS_TTL)
    else:
        # –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç, –∏—â–µ–º –≤ –ë–î
        print(f"seeking in db: {short_code}")
        query = select(ShortLink).where(ShortLink.short_code == short_code)
        result = await db.execute(query)
        short_link = result.scalars().first()

        if not short_link:
            return RedirectResponse("https://www.google.com/")  # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Google

        original_url = short_link.original_url
        await redis.set(redis_key, encode_url(original_url), ex=REDIS_TTL)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º IP-–∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ip_address = request.client.host if request.client else "unknown"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ IP
    country = get_country_by_ip(ip_address)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    user_agent = request.headers.get("User-Agent", "").lower()
    device_type = "mobile" if "mobile" in user_agent else "desktop"

    # –ü–∞—Ä—Å–∏–º –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ urlparse
    domain_1st, domain_2nd = parse_domains(original_url)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –ë–î
    print('–ó–∞–ø–∏—Å—å –≤ –ë–î')
    visit = Visit(
        owner=user_id,
        timestamp=datetime.now(),
        short_code=short_code,
        original_url=original_url,
        domain_1st=domain_1st,
        domain_2nd=domain_2nd,
        ip_address=ip_address,
        device_type=device_type,
        country=country,
        referer=request.headers.get("Referer"),
    )

    db.add(visit)
    await db.commit()

    return RedirectResponse(original_url)



@app.delete("/links/{short_code}")
async def delete_short_link(
    short_code: str,
    user_id: int = Depends(get_user_from_token),
    db: AsyncSession = Depends(get_db),
    redis: Redis = Depends(redis_dependency),
):
    print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —Å –∫–æ–¥–æ–º: {short_code} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {user_id}")
    
    if user_id is None:
        print("–û—à–∏–±–∫–∞: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return {"error": "Unauthorized: Guest users cannot delete links."}

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –≤ –ë–î –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        query = select(ShortLink).where(ShortLink.short_code == short_code, ShortLink.user_id == user_id)
        result = await db.execute(query)
        short_link = result.scalars().first()

        if not short_link:
            print(f"–û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ —Å –∫–æ–¥–æ–º {short_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
            return {"error": "Link not found or you do not have permission to delete it."}

        print(f"–°—Å—ã–ª–∫–∞ —Å –∫–æ–¥–æ–º {short_code} –Ω–∞–π–¥–µ–Ω–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Å—ã–ª–∫—É –≤ –∞—Ä—Ö–∏–≤
        archived_link = ShortLinkArchive(
            user_id=short_link.user_id,
            short_code=short_link.short_code,
            original_url=short_link.original_url,
            created_at=short_link.created_at,
            expires_at=short_link.expires_at,
            last_access_at=short_link.last_access_at,
            auto_expires_at=short_link.auto_expires_at,
            archived_at=datetime.now(),
            archival_reason="deleted"
        )
        db.add(archived_link)
        print(f"–°—Å—ã–ª–∫–∞ —Å –∫–æ–¥–æ–º {short_code} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.")

        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤—Å–µ –≤–∏–∑–∏—Ç—ã –≤ –∞—Ä—Ö–∏–≤
        query_visits = select(Visit).where(Visit.short_code == short_code)
        result_visits = await db.execute(query_visits)
        visits = result_visits.scalars().all()

        if visits:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(visits)} –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å—Å—ã–ª–∫–∏ {short_code}. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏—Ö –≤ –∞—Ä—Ö–∏–≤.")
            
            # –£–¥–∞–ª—è–µ–º –≤–∏–∑–∏—Ç—ã –ø–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
            for visit in visits:
                visit_archive = VisitArchive(
                    owner=visit.owner,
                    timestamp=visit.timestamp,
                    short_code=visit.short_code,
                    original_url=visit.original_url,
                    domain_1st=visit.domain_1st,
                    domain_2nd=visit.domain_2nd,
                    ip_address=visit.ip_address,
                    device_type=visit.device_type,
                    country=visit.country,
                    referer=visit.referer,
                    archived_at=datetime.now(),
                    archival_reason="deleted"
                )
                db.add(visit_archive)
                await db.delete(visit)  # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–∑–∏—Ç

        else:
            print(f"–í–∏–∑–∏—Ç–æ–≤ –¥–ª—è —Å—Å—ã–ª–∫–∏ {short_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ShortLink
        await db.delete(short_link)
        print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ —Å –∫–æ–¥–æ–º {short_code} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ShortLink.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ Redis
        await redis.delete(f"shortlink:{short_code}")
        await redis.delete(f"short_ui:{short_code}")
        print(f"–ö—ç—à –¥–ª—è —Å—Å—ã–ª–∫–∏ —Å –∫–æ–¥–æ–º {short_code} —É–¥–∞–ª–µ–Ω –∏–∑ Redis.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.commit()
        print(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°—Å—ã–ª–∫–∞ —Å –∫–æ–¥–æ–º {short_code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await db.rollback()
        return {"error": f"An error occurred while deleting the link: {str(e)}"}

    return {"message": "Link and visits successfully archived and deleted."}




@app.put("/links/{short_code}")
async def update_short_link(
    short_code: str,
    new_url: str,  # –ù–æ–≤—ã–π URL –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
    redis: Redis = Depends(redis_dependency),  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è Redis
    db: AsyncSession = Depends(get_db),  # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ URL
    if not re.match(r"^https?://", new_url):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")

    # –ö–æ–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis
    encoded_url = encode_url(new_url)

    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º short_code
    query = select(ShortLink).where(ShortLink.short_code == short_code).order_by(ShortLink.updated_at.desc())
    result = await db.execute(query)
    short_link = result.scalars().first()

    if not short_link:
        raise HTTPException(status_code=404, detail="Short link not found")

    # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    short_link.original_url = new_url
    await db.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à –∏–∑ Redis (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ URL)
    old_encoded_url = encode_url(short_link.original_url)
    await redis.delete(f"longlink:{old_encoded_url}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤ Redis –¥–ª—è –Ω–æ–≤–æ–≥–æ URL
    await redis.delete(f"shortlink:{short_code}")  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à
    await redis.set(f"shortlink:{short_code}", new_url)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫—ç—à

    # –ö–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –¥–ª–∏–Ω–Ω—ã–π URL
    await redis.set(f"longlink:{encoded_url}", short_code)

    return {"short_code": short_code, "new_url": new_url}


@app.get("/links/search")
async def search_short_link(
    original_url: str,
    redis: Redis = Depends(redis_dependency),
    db: AsyncSession = Depends(get_db),
):
    print(f"–ü–æ–∏—Å–∫ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ URL: {original_url}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not re.match(r"^https?://", original_url):
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL")

    # –ö–æ–¥–∏—Ä—É–µ–º URL –¥–ª—è Redis
    encoded_url = encode_url(original_url)

    # 1. –ò—â–µ–º –≤ Redis
    cached_short_code = await redis.get(f"longlink:{encoded_url}")
    if cached_short_code:
        short_code = decode_url(cached_short_code.decode())  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ Redis
        print(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –≤ Redis: {short_code}")
        return {"short_code": short_code, "original_url": original_url}

    # 2. –ï—Å–ª–∏ –≤ Redis –Ω–µ—Ç, –∏—â–µ–º –≤ –ë–î (—Å–∞–º—É—é —Å–≤–µ–∂—É—é)
    query = (
        select(ShortLink)
        .where(ShortLink.original_url == original_url)
        .order_by(ShortLink.created_at.desc())  # –ë–µ—Ä–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é
    )
    result = await db.execute(query)
    short_link = result.scalars().first()

    if not short_link:
        raise HTTPException(status_code=404, detail="Short link not found for the provided URL")

    # 3. –ö–µ—à–∏—Ä—É–µ–º –≤ Redis (–∫–æ–¥–∏—Ä—É–µ–º short_code!)
    await redis.set(f"longlink:{encoded_url}", encode_url(short_link.short_code))

    print(f"–ù–∞–π–¥–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –≤ –±–∞–∑–µ: {short_link.short_code}")

    return {"short_code": short_link.short_code, "original_url": short_link.original_url}
